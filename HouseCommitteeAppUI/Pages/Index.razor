@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1>House Committee Sugesstions</h1>
<div>
    <button>Suggest</button>
</div>

<div>
    <div>@suggestions?.Count Suggestions</div>
    <div>
        <button @onclick="( () => OrderByNew(true) )">New</button>
        <button @onclick="( () => OrderByNew(false) )">Popular</button>
    </div>
    <div>
        <input type="text" placeholder="Search" aria-label="Search box" 
                    @oninput="( (txt) => OnSearchInput((string)txt.Value)) " /> 
        
    </div>
</div>

<div>
    <div>
        @if (suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div>
                    <div @onclick="( () => VoteUp(s) )">
                        <div>@GetUpvoteTopText(s)</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvoteBottomText(s)</div>
                    </div>
                    <div>
                        <div @onclick="( () => OpenDetails(s) )">
                            @s.Suggestion
                        </div>
                        <div @onclick="( () => OpenDetails(s) )">
                            @s.Category?.CategoryName
                        </div>
                    </div>
                    <div>
                        <div>
                            @s.SuggesionStatus?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div>
        @if (categories is not null)
        {
            <div>
                <span>Category</span>
                <div @onclick="( () => OnCaregoryClick() )">All</div>
                @foreach (var c in categories)
                {
                    <div @onclick="( () => OnCaregoryClick(c.CategoryName))">@c.CategoryName</div>
                }
            </div>
        }
        @if (statuses is not null)
        {
            <div>
                <span>Status</span>
                <div @onclick="( () => OnStatusClick() )">All</div>
                @foreach (var s in statuses)
                {
                    <div @onclick="( () => OnStatusClick(s.StatusName))">@s.StatusName</div>
                }
            </div>
        }
    </div>
</div>

@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCatrgoriesAsync();
        statuses = await statusData.GetAllStatusesAsync();
        await LoadAndVerifyUserAsync();
    }

    private async Task LoadAndVerifyUserAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if(string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAutenticationAsync(objectId) ?? new();

            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            //TODO: try and change apartmentNumber to be stored in its own fiels on azure
            string apartmentNumber = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;
            string street = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("streetAddress"))?.Value;

            bool isDirty = false;
            if  (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if (apartmentNumber.Equals(loggedInUser.AppartmentNum) == false)
            {
                isDirty = true;
                loggedInUser.AppartmentNum = apartmentNumber;
            }
            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }
            if (street.Equals(loggedInUser.StreetAddress) == false)
            {
                isDirty = true;
                loggedInUser.StreetAddress = street;
            }

            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {   
        if(firstRender)
        {
            await LoadFilterStateAsync();
            await FilterSuggestionsAsync();
            StateHasChanged();
        }

    }

    private async Task LoadFilterStateAsync()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All"; 

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterStateAsync()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestionsAsync()
    {
        var output = await suggestionData.GetAllApprovedSuggestionsAsync();

        if( selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.SuggesionStatus?.StatusName == selectedStatus).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                s => (
                (s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) == true)
                ||
                (s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) == true)
                )).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();
        }
        suggestions = output;

        await SaveFilterStateAsync();

    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestionsAsync();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestionsAsync();
    }

    private async Task OnCaregoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestionsAsync();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestionsAsync();
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if(loggedInUser is not null)
        {
            if(suggestion.Author.Id == loggedInUser.Id)
            {
                //cant vote on your own suggestion
                return;
            }

            if(suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                //duble clicking on the vote button will un-vote
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);
            if( isSortedByNew == false)
            {
                //sorted by popularity
                suggestions = suggestions
                                .OrderByDescending(s => s.UserVotes.Count)
                                .ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {
            //user needs to be signed in in order to upvote
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if( suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awating"; //if the suggestion belong to the logged in user, he will see "Awating upvote" 
            }
            else
            {   
                return "Click To";
            }
        }
    }

    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        if( suggestion.UserVotes.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }


}

