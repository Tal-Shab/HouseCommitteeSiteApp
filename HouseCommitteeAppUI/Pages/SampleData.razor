@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>Sample Data</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

@if (userCreated)
{
    <h4>user have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateUser">Create User</button>
}

@if (suggestionsCreated)
{
    <h4>suggestions have been created</h4>
}
else
{
    <button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>
}


@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;
    private bool userCreated = false;
    private bool suggestionsCreated = false;

    private async Task GenerateSampleData()
    {
        var foundUser = await userData.GetUserFromAutenticationAsync("abc-123");
        var categories = await categoryData.GetAllCatrgoriesAsync();
        var statuses = await statusData.GetAllStatusesAsync();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "The Building's First Suggestion",
                Description = "test suggestion crated by the sample data generation method",
                UserVotes = votes,
                SuggesionStatus = statuses[0]
            };
        await suggestionData.CreateSuggestion(suggestion);

        votes.Add("4");

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "The Building's Second Suggestion",
                Description = "test suggestion crated by the sample data generation method",
                SuggesionStatus = statuses[1],
                UserVotes = votes,
                OwnerNotes = "this is a note for the status"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestionsCreated = true;
    }

    private async Task CreateUser()
    {
        var foundUser = await userData.GetUserFromAutenticationAsync("abc-123");
        if (foundUser != null)
        {
            return;
        }
        UserModel user = new()
            {
                FirstName = "Tal",
                LastName = "Shab",
                AppartmentNum = "6",
                EmailAddress = "Tal@gmail.com",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreateUser(user);

        userCreated = true;
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCatrgoriesAsync();
        if( categories?.Count > 0)
        {
            return;
        }
        CategoryModel cat = new()
            {
            CategoryName = "Improvments",
            CategoryDescription = "an improvment to be done to the building"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Malfunction",
                CategoryDescription = "a malfunction that needs to be fixed"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Hires",
                CategoryDescription = "a suggestion for a professional to be hired to perform a service"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "does not match any category"
            };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;

    }
    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatusesAsync();
        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "the suggestion was accepted and the corresponding action was taken."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "the suggestion was accepted and the corresponding action is scedualed to be done."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Waching",
                StatusDescription = "the suggestion is taken under considaration."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Dissmissed",
                StatusDescription = "the suggestion will not go through."
            };
        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
}
